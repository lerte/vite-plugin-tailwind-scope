// node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;
  else if ("object" == typeof e) if (Array.isArray(e)) {
    var o = e.length;
    for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
  } else for (f in e) e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_default = clsx;

// src/plugin/css.ts
var css = (styles) => {
  return (strings) => {
    const names = clsx_default([...strings]);
    const classNames = names.split(" ");
    return classNames.map((item) => styles[item]).join(" ");
  };
};

// src/plugin/scope.ts
import fs from "fs";
import path from "path";
import postcss from "postcss";
import tailwindcss from "tailwindcss";
var VITE_PLUGIN_NAME = "vite-plugin-tailwind-scope";
var generateCssModule = (file, css2, options) => {
  const { dest = "." } = options ?? {};
  const componentName = path.basename(file, path.extname(file));
  const cssModuleContent = `
  /* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

${css2}   
  `;
  const base = path.dirname(file);
  const dir = path.join(base, dest);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  const filePath = path.join(dir, `${componentName}.module.css`);
  fs.writeFileSync(filePath, cssModuleContent.trim());
  console.log(`CSS Module ${componentName}.module.css created successfully!`);
  return {
    filePath,
    content: cssModuleContent.trim()
  };
};
var scope = (options) => {
  const resolvedVirtualModuleIds = /* @__PURE__ */ new Map();
  return {
    name: VITE_PLUGIN_NAME,
    // resolveId(id) {
    //   if (virtualModuleIds.has(id)) {
    //     return virtualModuleIds.get(id);
    //   }
    // },
    load(id) {
      if (resolvedVirtualModuleIds.get(id)) {
        return resolvedVirtualModuleIds.get(id);
      }
    },
    handleHotUpdate({ file }) {
      if (file.endsWith(".jsx") || file.endsWith(".tsx")) {
        const content = fs.readFileSync(file, "utf-8");
        postcss([
          tailwindcss({
            content: [
              {
                raw: content,
                extension: "jsx"
              }
            ]
          })
        ]).process("@tailwind utilities;", { to: void 0 }).then(({ css: css2 }) => {
          const { filePath, content: content2 } = generateCssModule(file, css2, options);
          resolvedVirtualModuleIds.set(filePath, content2);
        });
      }
    }
  };
};
export {
  css,
  scope
};
//# sourceMappingURL=index.js.map