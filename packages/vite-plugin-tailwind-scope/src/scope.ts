import type { Plugin } from "vite";
import fs from "fs";
import path from "path";
import postcss from "postcss";
import tailwindcss from "tailwindcss";

const VITE_PLUGIN_NAME = "vite-plugin-tailwind-scope";

type TailwindScopeOptions = {
  /**
   * where to generated css module file, relative to jsx/tsx file.
   * default is relative to jsx/tsx file.
   */
  dest?: string;
};

const generateCssModule = (
  file: string,
  css: string,
  options?: TailwindScopeOptions
) => {
  const { dest = "." } = options ?? {};
  const componentName = path.basename(file, path.extname(file));

  const cssModuleContent = `
  /* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

${css}   
  `;

  const base = path.dirname(file);
  const dir = path.join(base, dest);

  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }

  const filePath = path.join(dir, `${componentName}.module.css`);
  fs.writeFileSync(filePath, cssModuleContent.trim());
  console.log(`CSS Module ${componentName}.module.css created successfully!`);
  return {
    filePath,
    content: cssModuleContent.trim(),
  } as const;
};

export const scope = (options?: TailwindScopeOptions): Plugin => {
  // const virtualModuleIds = new Map(); // `${VITE_PLUGIN_NAME}:my-module`;
  const resolvedVirtualModuleIds = new Map(); // "\0" + virtualModuleId;

  return {
    name: VITE_PLUGIN_NAME,
    // resolveId(id) {
    //   if (virtualModuleIds.has(id)) {
    //     return virtualModuleIds.get(id);
    //   }
    // },
    load(id) {
      if (resolvedVirtualModuleIds.get(id)) {
        return resolvedVirtualModuleIds.get(id);
      }
    },
    handleHotUpdate({ file }: { file: string }) {
      if (file.endsWith(".jsx") || file.endsWith(".tsx")) {
        const content = fs.readFileSync(file, "utf-8");
        postcss([
          tailwindcss({
            content: [
              {
                raw: content,
                extension: "jsx",
              },
            ],
          }),
        ])
          .process("@tailwind utilities;", { to: undefined })
          .then(({ css }) => {
            const { filePath, content } = generateCssModule(file, css, options);
            resolvedVirtualModuleIds.set(filePath, content);
          });
      }
    },
  };
};
